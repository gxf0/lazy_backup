#!/bin/bash

#################################################
#
# Lazy Backup
# Version 1.1a
# Copyright 2018, Veit <mail@geekmonkey.de>
#
# Tested: 20.03.2018
#
#################################################

## Configure


cfg_export=export.cfg
cfg_import=import.cfg

## xf0 Default
out="/dev/null"
mydir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
myname=$(basename $0)
string="$@"

# Colors
green='\e[92m'
red='\e[31m'
blue='\e[96m'
nc='\033[0m'

##### Start Script  ####

cmdline() {
    local arg=
    for arg
    do
        local delim=""
        case "$arg" in
            --export)         args="${args}-e ";;
            --import)         args="${args}-i ";;
            --help)           args="${args}-h ";;
            --debug)          args="${args}-x ";;
            --screen)         args="${args}-s ";;
            *) [[ "${arg:0:1}" == "-" ]] || delim="\""
                args="${args}${delim}${arg}${delim} ";;
        esac
    done
    eval set -- $args

    while getopts "iehxs" option
    do
         case $option in
         h)
             usage
             exit 0
             ;;
         e)
             export_files
             exit 0
             ;;
         i)
             import_files
             exit 0
             ;;
         x)
             exec 5>dev-debug.log
             BASH_XTRACEFD="5"
             set -x
             ;;
         s)
             out='/dev/tty'
             ;;
        esac
    done
    return 0
}

usage() {
    cat <<- EOF

    ----------------------------------------------------

    Usage: $myname options

    Simple Script to backup and restore your server.
    For more information check https://github.com/gxf0/lazy_backup

    Please make sure to adjust the config file (backup.cfg)

    Options:
       -e  --export		export files
       -i  --import		import files
       -s  --screen		show terminal output
       -x  --debug		debug (dev-debug.log)
       -h  --help		show this help


    Examples:
       Debug script :
       $myname -x
       $myname --debug

EOF
}

start_script() {
   starttime=$(date +%s)
   echo ""
   echo -e "${blue}==============================================="
   echo -e "Begin to $1 your files (may take a while)"
   echo -e "===============================================${nc}"
}

stop_script() {
   endtime=$[$(date +%s)-$starttime]
   echo ""
   echo -e "${blue}==============================================="
   echo -e "Done (duration: $endtime seconds)"
   echo -e "===============================================${nc}"
   echo ""
}

config_read_var() { #syntax <config.cfg> <section>
cfg_content=$(sed -n "/\[$2\]/,/\[end]/p" $1 | sed -r '/[^=]+=[^=]+/!d' | sed -r 's/\s+=\s/=/g')
for var in $cfg_content
  do
    export ${var//\"}
  done
}

config_read_dir() { #syntax <config.cfg> <section>
   cfg_content=$(sed -n "/\[$2\]/,/\[end]/p" $1)
   cfg_content=${cfg_content//\[$2\]/}
   cfg_content=${cfg_content//\[end\]/}
}

# Export

prepare_export() {
  config_read_var $cfg_export basic
  now=$(date +%Y-%d-%m)
  backup_now="$backup_dir/$now"
  mkdir $backup_dir > $out 2>&1
  mkdir $backup_now > $out 2>&1
}

export_mysql() {
  config_read_var $cfg_export sql
  mkdir $backup_now/sql > $out 2>&1
  mysql --skip-column-names -u $sql_user -p$sql_pw -e 'show databases' | while read dbname; do mysqldump --lock-all-tables -u $sql_user -p$sql_pw "$dbname" | gzip> $backup_now/sql/"$dbname".sql.gz; done > $out 2>&1
  rm -f $backup_now/sql/information_schema.sql.gz $backup_now/sql/performance_schema.sql.gz > $out 2>&1
}

export_dir() {
    config_read_dir $cfg_export dir
    mkdir $backup_now/dir > $out 2>&1
    for dir in $cfg_content
    do
       base="${dir##*/}"
       tar cfvj $backup_now/dir/"${base}.tar.bz2" "$dir" > $out 2>&1
    done
}

compress_export() {
   cd $backup_dir/$now
   tar cfvj $backup_dir/"backup.tar.bz2" * > $out 2>&1
   rm -rf $backup_dir/$now
 }

export_files() {
  start_script backup
  prepare_export
  export_mysql
  export_dir
  compress_export
  stop_script
 }

 # Import

prepare_import() {
  config_read_var $cfg_import basic
  mkdir $mydir/tmp > $out 2>&1
  tar xfj $backup_file -C $mydir/tmp
}

import_dir() {
  cd $mydir/tmp/dir
  for file in `ls *.tar.bz2`; do
    tar -xf $file -C /
  done
}

import_mysql() {
  config_read_var $cfg_import sql
  cd $mydir/tmp/sql
  for filename in `ls *.sql.gz`; do
    gunzip $filename
  done
  for i in $(seq 1 $db_count)
  do
    vname="dbname_$i"; vname="${!vname}"
    vuser="dbuser_$i"; vuser="${!vuser}"
    vpass="userpass_$i"; vpass="${!vpass}"
    echo "CREATE DATABASE $vname;" | mysql -u $sql_user -p$sql_pw
    echo "CREATE USER '$vuser'@'localhost' IDENTIFIED BY '$vpass';" | mysql -u $sql_user -p$sql_pw
    echo "GRANT ALL PRIVILEGES ON $vname.* TO '$vuser'@'localhost';" | mysql -u $sql_user -p$sql_pw
    echo "FLUSH PRIVILEGES;" | mysql -u $sql_user -p$sql_pw
    mysql -u $vuser -p$vpass $vname < $mydir/tmp/sql/"$vname".sql
  done
}

import_files() {
  start_script import
  prepare_import
  import_dir
  import_mysql
  stop_script
 }

 # Main

 main() {
   cmdline $string
   echo ""
   echo -e "${blue}Notice:${nc} please use $myname -e to export or -i to import your files"
   echo -e "        for help, please use $myname -h (--help)"
   echo ""
 }

main
